using System;
using System.Diagnostics;

namespace TeaTime
{
<#
string[] typeNames = new string[]{"int", "double", "long", "DateTime"};
string[] classNames = new string[]{"Range", "RangeD", "RangeL", "RangeT"};

for(int i=0; i<typeNames.Length; i++)
{
string typename = typeNames[i];
string classname = classNames[i];
#>
    [Serializable]
    public partial struct <#= classname #>
    {
        #region fields
        private <#=typename#> start;
        private <#=typename#> end;
        #endregion

        #region ctor
        public <#= classname #>(<#=typename#> start, <#=typename#> end)
        {
            this.start = start;
            this.end = end;
        }
        #endregion

        #region Empty constant
        public static readonly <#= classname #> Empty = new <#= classname #>(<#= typename #>.MaxValue, <#=typename#>.MinValue);
        #endregion

        #region public properties
        public <#=typename#> Start
        {
            get
            {
                return start;
            }
            set
            {
                start = value;
            }
        }
        public <#=typename#> End
        {
            set
            {
                end = value;
            }
            get
            {
                return end;
            }
        }        
        public bool IsEmpty
        {
            get
            {
                return this.end < this.start;
            }
        }        
        #endregion

        #region public methods
        public bool Contains(<#=typename#> value)
        {
            return value >= start && value <= end;
        }
		public <#=typename#> EnsureContained(<#=typename#> value)
        {
            if (value > end)
            {
                return end;
            }
            if (value < start)
            {
                return start;
            }
            return value;
        }
        /// <summary>
        /// Returns true if r is fully contained or equivalent in this.
        /// </summary>
        /// <param name="r">The <#= classname #> to be checked</param>
        /// <returns>true if r is fully contained or equivalent in this.</returns>
        public bool Contains(<#= classname #> r)
        {
            return (r.start >= this.start) && (r.end <= this.end);
        }
        public bool Overlaps(<#= classname #> r)
        {
            if(r.start > this.end || r.end < this.start)
            {
                return false;
            }
            if (this.IsEmpty || r.IsEmpty)
            {
                return false;
            }
            return true;
        }
        
        public override string ToString()
        {
            if (IsEmpty) return "Empty (" + this.start + "=>" + this.end + ")";
            return this.start + "=>" + this.end;
        }
        #endregion

        #region operators
        public static bool operator==(<#= classname #> lhs, <#= classname #> rhs)
        {
            return lhs.start == rhs.start
                && lhs.end == rhs.end;
        }
        public static bool operator !=(<#= classname #> lhs, <#= classname #> rhs)
        {
            return !(lhs == rhs);
        }       
        #endregion
    }
<#
}
#>
}